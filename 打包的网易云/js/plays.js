/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/plays.js":
/*!*************************!*\
  !*** ./src/js/plays.js ***!
  \*************************/
/***/ (() => {

eval("let part1 = document.querySelector('.part1')\r\nlet part2 = document.querySelector('.part2')\r\nlet SongCover = document.querySelector('.SongCover')\r\nlet bottomIcons = document.querySelectorAll('.icons img')\r\nlet playBtns = document.querySelectorAll('.btns img')\r\nlet preSong = document.querySelector('.preSong')\r\nlet playSong = document.querySelector('.playSong')\r\nlet nextSong = document.querySelector('.nextSong')\r\nlet audio = document.querySelector('audio')\r\nlet Pdot = document.querySelector('.Pdot')\r\nlet running = document.querySelector('.running')\r\nlet Ccomments = document.querySelector('.Ccomments')\r\nlet Ccomment = document.querySelector('.Ccomment')\r\nlet runningGrey = document.querySelector('.runningGrey')\r\nlet windowWidth = document.body.clientWidth\r\n//document.body.style.zoom = 0.67;\r\ndocument.querySelector('.Play').style.width = '' + windowWidth + 'px'\r\n\r\nfor (let i = 0; i < 5; i++) {//底部播放控制按钮覆盖变红\r\n    playBtns[i].addEventListener('mouseenter', function () {\r\n        playBtns[i].src = './images/play' + i + '1.png'\r\n    })\r\n    playBtns[i].addEventListener('mouseleave', function () {\r\n        playBtns[i].src = './images/play' + i + '.png'\r\n    })\r\n}\r\nfor (let i = 0; i < 4; i++) {//底部按钮覆盖变样式\r\n    bottomIcons[i].addEventListener('mouseenter', function () {\r\n        bottomIcons[i].src = './images/playbottom' + i + '1.png'\r\n    })\r\n    bottomIcons[i].addEventListener('mouseleave', function () {\r\n        bottomIcons[i].src = './images/playbottom' + i + '0.png'\r\n    })\r\n}\r\n//上一首下一首\r\nlet temp3 = 0 //计数变量\r\nlet preId = 0 //上一首歌的id\r\nlet nextId = 0 //下一首歌的id\r\nlet idF = function () {\r\n    let idArr = localStorage.songIdList.split(',') //当前歌单所有歌曲的id数组\r\n    for (let i = 0; i < idArr.length; i++) {\r\n        temp3++;\r\n        if (idArr[i] == localStorage.songId) { //如果现在播放的歌曲与列表中的某一个相同\r\n            if (temp3 == 1) {  //处于第一首\r\n                preId = idArr[idArr.length - 1]\r\n                nextId = idArr[1]\r\n            } else if (temp3 == idArr.length) { //处于最后一首\r\n                preId = idArr[idArr.length - 2]\r\n                nextId = idArr[0]\r\n            } else { //通常\r\n                preId = idArr[temp3 - 2]\r\n                nextId = idArr[temp3]\r\n            }\r\n        }\r\n    }\r\n}\r\nsetTimeout(idF, 500) //页面加载顺序问题修正\r\npreSong.addEventListener('click', function () { //上一首按钮点击事件\r\n    audio.pause();\r\n    localStorage.setItem('songId', preId)\r\n    window.location.href = 'play.html'\r\n})\r\nnextSong.addEventListener('click', function () { //下一首按钮点击事件\r\n    audio.pause();\r\n    localStorage.setItem('songId', nextId)\r\n    window.location.href = 'play.html'\r\n})\r\n//根据localStorage.songId加载底部播放的歌曲信息\r\nfetch('http://localhost:3000/song/url?id=' + localStorage.songId + '')\r\n    .then(res => { return res.json() }).then(data => {\r\n        audio.src = data.data[0].url\r\n        console.log(audio.src);\r\n    })\r\nfetch('http://localhost:3000/song/detail?ids=' + localStorage.songId + '')\r\n    .then(res => { return res.json() }).then(data => {\r\n        document.querySelector('.songName').innerText = data.songs[0].name\r\n        document.title = data.songs[0].name\r\n        document.querySelector('.SongCover').src = data.songs[0].al.picUrl\r\n        document.querySelector('.al').innerText = '' + data.songs[0].ar[0].name + ' / ' + data.songs[0].al.name + ''\r\n    })\r\n\r\n\r\n//播放控制\r\nlet get = function () { //获取歌曲信息\r\n    let duration = document.querySelector('.audio').duration;\r\n    let currentTime = document.querySelector('.audio').currentTime;\r\n    //处理并插入时间\r\n    let m = parseInt(duration / 60)\r\n    let s = parseInt(duration % 60)\r\n    let mm = parseInt(currentTime / 60)\r\n    let ss = parseInt(currentTime % 60)\r\n    document.querySelector('.totalTime').innerText = '' + m + ':' + s + ''\r\n    document.querySelector('.nowTime').innerText = '' + mm + ':' + ss + ''\r\n    //进度圆点前进\r\n    Pdot.style.left = '' + (currentTime / duration) * 560 + 'px'\r\n    runningGrey.style.width = '' + (currentTime / duration) * 560 + 'px'\r\n}\r\nlet timer = setInterval(get, 1000)//一秒刷新一次\r\n//拖动进度条\r\nrunning.addEventListener('click', () => { //点击进度条，进度改变，圆点前进\r\n    let Fpos = running.getBoundingClientRect().left\r\n    let Spos = event.clientX\r\n    let percentage = (Spos - Fpos) / 560\r\n    document.querySelector('.audio').currentTime = document.querySelector('.audio').duration * percentage\r\n    Pdot.style.left = '' + Spos - Fpos - 7.5 + 'px'\r\n})\r\nrunningGrey.addEventListener('click', () => {\r\n    let Fpos = running.getBoundingClientRect().left\r\n    let Spos = event.clientX\r\n    let percentage = (Spos - Fpos) / 560\r\n    document.querySelector('.audio').currentTime = document.querySelector('.audio').duration * percentage\r\n    Pdot.style.left = '' + Spos - Fpos - 7.5 + 'px'\r\n    runningGrey.style.width = '' + Spos - Fpos - 7.5 + 'px'\r\n})\r\n//唱片旋转\r\nlet deg = 1\r\nlet rotate = function () {\r\n    deg++\r\n    part2.style.transform = 'rotate(' + deg + 'deg)'\r\n    SongCover.style.transform = 'rotate(' + deg + 'deg)'\r\n    return deg\r\n}\r\nlet timerR = {}\r\nplaySong.addEventListener('click', () => {\r\n    get()\r\n    if (audio.paused) { //如果暂停时点击\r\n        timerR = setInterval(rotate, 50) //开始旋转\r\n        part1.className = 'part1After'\r\n        playBtns[2].src = './images/play12.png' //播放按钮三角变两竖杠\r\n        playBtns[2].addEventListener('mouseenter', function () {\r\n            playBtns[2].src = './images/play121.png'\r\n        })\r\n        playBtns[2].addEventListener('mouseleave', function () {\r\n            playBtns[2].src = './images/play12.png'\r\n        })\r\n        audio.play();//播放\r\n        return timerR\r\n    } else { //反之\r\n        clearInterval(timerR)\r\n        part1.className = 'part1'\r\n        playBtns[2].src = './images/play1.png'\r\n        playBtns[2].addEventListener('mouseenter', function () {\r\n            playBtns[2].src = './images/play21.png'\r\n        })\r\n        playBtns[2].addEventListener('mouseleave', function () {\r\n            playBtns[2].src = './images/play2.png'\r\n        })\r\n        audio.pause();//暂停\r\n    }\r\n})\r\n//歌名方块居中\r\nlet center = function () {\r\n    let songTitle = document.querySelector('.songTitle')\r\n    songTitle.style.marginLeft = '' + -0.5 * songTitle.offsetWidth + 'px'\r\n}\r\nsetTimeout(center, 400) //页面加载顺序问题修正\r\n//音量调节\r\nlet volumBtn = document.querySelector('.volumBtn')\r\nlet volumL = document.querySelector('.l')\r\nlet volumD = document.querySelector('.d')\r\nlet count8 = 0;\r\nvolumBtn.addEventListener('click', function () { //点击喇叭出现音量调节方块\r\n    count8++;\r\n    if (count8 % 2 != 0) {\r\n        document.querySelector('.volum').style.display = 'block'\r\n    } else {\r\n        document.querySelector('.volum').style.display = 'none'\r\n    }\r\n})\r\nvolumL.addEventListener('click', () => {\r\n    let Fpos = volumL.getBoundingClientRect().bottom //通过音量条长度和点击Y坐标的比值控制音量\r\n    let Spos = event.clientY\r\n    let persentage = (Fpos - Spos) / 100\r\n    volumD.style.marginTop = '' + -(7 + (persentage * 100)) + 'px'\r\n    audio.volume = persentage\r\n})\r\n//评论\r\nlet commentF = function () {\r\n    fetch('http://localhost:3000/comment/music?id=' + localStorage.songId + '')\r\n        .then(res => { return res.json() }).then(data => {\r\n            Ccomment.querySelector('.cNum').innerText = '全部评论(' + data.total + ')'\r\n            //热评\r\n            for (let i = 0; i < data.hotComments.length; i++) {\r\n                document.querySelector('.Ccomment').append(Ccomments.cloneNode(true))\r\n                Ccomment.querySelector('.Chead').src = '' + data.hotComments[i].user.avatarUrl + ''\r\n                Ccomment.querySelector('.Cinner a').innerText = '' + data.hotComments[i].user.nickname + ''\r\n                Ccomment.querySelector('.inner').innerText = ':' + data.hotComments[i].content + ''\r\n                Ccomment.querySelector('.Ctime').innerText = '' + data.hotComments[i].timeStr + ''\r\n                Ccomment.querySelector('.Cright span').innerText = '' + data.hotComments[i].likedCount + ''\r\n            }\r\n            let moreComment = document.createElement(\"img\")\r\n            moreComment.src = \"./images/morecomment.png\"\r\n            moreComment.style.marginLeft = '350px'\r\n            moreComment.style.cursor = 'pointer'\r\n            Ccomment.append(moreComment)\r\n            let cNum1 = document.querySelector(\".cNum\")\r\n            cNum1.innerText = '最新评论(' + data.total + ')'\r\n            Ccomment.append(cNum1.cloneNode(true))\r\n            //普通评论\r\n            for (let i = 0; i < data.comments.length; i++) {\r\n                document.querySelector('.Ccomment').append(Ccomments.cloneNode(true))\r\n                Ccomment.querySelector('.Chead').src = '' + data.comments[i].user.avatarUrl + ''\r\n                Ccomment.querySelector('.Cinner a').innerText = '' + data.comments[i].user.nickname + ''\r\n                Ccomment.querySelector('.inner').innerText = ':' + data.comments[i].content + ''\r\n                Ccomment.querySelector('.Ctime').innerText = '' + data.comments[i].timeStr + ''\r\n                Ccomment.querySelector('.Cright span').innerText = '' + data.comments[i].likedCount + ''\r\n            }\r\n            //bug修正\r\n            let remove2 = Ccomment.children[1]\r\n            let remove3 = Ccomment.children[2]\r\n            Ccomment.appendChild(remove2)\r\n            Ccomment.removeChild(remove3)\r\n            let temp = data.hotComments.length + 2\r\n            let remove1 = Ccomment.children[temp]\r\n            Ccomment.removeChild(remove1)\r\n        })\r\n}\r\ncommentF()\r\n//热搜\r\nlet hotSearch = document.querySelector('.hotSearch')\r\nlet searchs = document.querySelectorAll('.hotSearch div')\r\nfor (let i = 0; i < 20; i++) { //方块鼠标移入变色\r\n    searchs[i].addEventListener('mouseenter', function () {\r\n        searchs[i].style.backgroundColor = 'rgb(242, 242, 242)'\r\n    })\r\n    searchs[i].addEventListener('mouseleave', function () {\r\n        searchs[i].style.backgroundColor = '#fff'\r\n    })\r\n}\r\nfetch('http://localhost:3000/search/hot/detail') //获取热搜内容\r\n    .then(res => { return res.json() }).then(data => {\r\n        for (let i = 0; i < 20; i++) {\r\n            searchs[i].querySelector('.hotName').innerText = data.data[i].searchWord\r\n            searchs[i].querySelector('.hotNum').innerText = data.data[i].score\r\n            if (data.data[i].content != '') { //热搜评论\r\n                searchs[i].querySelector('.detile').innerText = data.data[i].content\r\n            }\r\n            if (data.data[i].iconUrl != null) { //热搜小图标\r\n                searchs[i].querySelector('img').src = data.data[i].iconUrl\r\n                searchs[i].querySelector('img').style.height = '20px'\r\n            }\r\n            searchs[i].addEventListener('click', function () { //点击搜索\r\n                localStorage.setItem('searchValue', data.data[i].searchWord)\r\n                window.location.href = 'search.html'\r\n            })\r\n        }\r\n    })\r\ndocument.querySelector('.search').onblur = function () { //搜索框失去焦点，消失\r\n    setTimeout(\"document.querySelector('.hotSearch').style.display = 'none'\", 100)\r\n}\r\n//获取默认搜索词\r\nfetch('http://localhost:3000/search/default')\r\n    .then(res => { return res.json() }).then(data => {\r\n        document.querySelector('.search').placeholder = '' + data.data.showKeyword + ''\r\n        localStorage.setItem('realkeyword', data.data.realkeyword)\r\n    })\r\n//搜索\r\ndocument.querySelector('.search').onfocus = function () {\r\n    document.querySelector('.hotSearch').style.display = 'block'\r\n    document.onkeydown = function (e) {\r\n        let a = e || window.event;\r\n        if (a.keyCode == 13) {\r\n            if (document.querySelector('.search').value !== '') {//输入框里有值，直接搜索\r\n                localStorage.setItem('searchValue', document.querySelector('.search').value)\r\n                window.location.href = 'search.html'\r\n            } else { //输入框为空，用默认值搜索\r\n                localStorage.setItem('searchValue', localStorage.realkeyword)\r\n                window.location.href = 'search.html'\r\n            }\r\n        }\r\n    }\r\n}\r\n//歌词滚动\r\nlet lyArr = []\r\nlet tlyric = []\r\nlet tlyric1 = []\r\nlet timeArr = []\r\nlet wordArr = []\r\nlet tempArr = []\r\nlet nowTime = 0\r\nlet lyricBox = document.querySelector('.lyric')\r\nfetch('http://localhost:3000/lyric?id=' + localStorage.songId + '')\r\n    .then(res => { return res.json() }).then(data => {\r\n        lyArr = data.lrc.lyric.split('\\n') //歌词数组\r\n        tlyric = data.tlyric.lyric.split('\\n') //翻译数组\r\n        for (let i = 0; i < lyArr.length; i++) {\r\n            if (lyArr[i].slice(11) == '') {\r\n                lyArr.splice(i, 1)\r\n            }\r\n        }\r\n        tlyric.forEach((currentValue) => {\r\n            tlyric1.push(currentValue.slice(1, 10))\r\n        })\r\n        for (let i = 0; i < lyArr.length; i++) { //把时间和词分入两个数组\r\n            let sec = 0\r\n            if (lyArr[i].slice(1, 3) != 00) { //有分钟位\r\n                sec = parseInt(lyArr[i].slice(2, 3) * 60) + parseInt(lyArr[i].slice(4, 6))\r\n            } else if (lyArr[i].slice(4, 5) == 0) { //第一个秒位上有0\r\n                sec = lyArr[i].slice(5, 6)\r\n            } else {\r\n                sec = lyArr[i].slice(4, 6)\r\n            }\r\n            if (lyArr[i].slice(lyArr[i].indexOf(']') + 1) != \"\") {//去除歌词中为空的\r\n                timeArr.push(parseFloat('' + sec + '.' + lyArr[i].slice(7, 10) + ''))\r\n                if (data.tlyric.lyric != '') {//如果有翻译\r\n                    for (let i = 0; i < lyArr.length; i++) {\r\n                        wordArr.push(lyArr[i].slice(lyArr[i].indexOf(']') + 1))\r\n                        for (let j = 0; j < tlyric1.length; j++) {\r\n                            if (lyArr[i].slice(1, 10) == tlyric1[j]) { //如果歌词与翻译的时间相符\r\n                                wordArr[i] = '' + lyArr[i].slice(lyArr[i].indexOf(']') + 1) + '\\n' + tlyric[j].slice(lyArr[i].indexOf(']') + 1) + ''\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    wordArr.push(lyArr[i].slice(lyArr[i].indexOf(']') + 1))\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < timeArr.length; i++) {\r\n            let p = document.createElement('p')\r\n            p.innerText = wordArr[i]\r\n            if (i == 0) {\r\n                p.className = 'lyin'\r\n            } else {\r\n                p.className = 'lyout'\r\n            }\r\n            lyricBox.append(p) //插入歌词方块\r\n        }\r\n    })\r\nlet getLy = function () { //更新播放进度\r\n    nowTime = document.querySelector('.audio').currentTime.toFixed(3)\r\n}\r\nlet temp111 = 0\r\nlet compare = function () {\r\n    for (let i = 0; i < timeArr.length; i++) {\r\n        if (nowTime > timeArr[i]) { //播放时间超出时间轴时间，代表这句歌词已经过去\r\n            temp111 = i\r\n        }\r\n    }\r\n}\r\nlet scroll = function () { //歌词滚动效果\r\n    if (temp111 == 0) {\r\n        lyricBox.querySelectorAll('p').forEach((currentValue) => { //排他思想改变样式\r\n            currentValue.className = 'lyout'\r\n        })\r\n        lyricBox.querySelectorAll('p')[temp111].className = 'lyin'\r\n    } else {\r\n        lyricBox.querySelectorAll('p').forEach((currentValue) => {\r\n            currentValue.className = 'lyout'\r\n        })\r\n        lyricBox.querySelectorAll('p')[temp111].className = 'lyin'\r\n    }\r\n    if (tlyric != '') {//如果有翻译，要滚得多一些\r\n        lyricBox.scroll({\r\n            top: (temp111) * 150,\r\n            behavior: 'smooth'\r\n        })\r\n    } else {\r\n        lyricBox.scroll({\r\n            top: (temp111) * 90,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n}\r\nwindow.onload = function () {\r\n    setInterval(() => {\r\n        scroll()\r\n        getLy()\r\n        compare()\r\n    }, 100)\r\n};\r\nsetTimeout(() => {\r\n    document.querySelectorAll('.NlistItem').forEach((element) => {\r\n        element.style.color = ''\r\n        if (element.id == localStorage.songId) {//当前歌曲字体为红色\r\n            element.style.color = 'red'\r\n        }\r\n        element.addEventListener('click', () => {\r\n            localStorage.setItem('songId', element.id)\r\n            window.location.href = 'play.html'\r\n        })\r\n    })\r\n}, 1000);\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://cloud-music/./src/js/plays.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/plays.js"]();
/******/ 	
/******/ })()
;